import { type NextRequest, NextResponse } from "next/server";
import { apiClient } from "@/lib/api-client";

interface RegenerateRequest {
  userData: {
    learningGoal: string;
    dailyTime: string;
    duration: string;
    learningStyle: string;
    targetLevel: string;
  };
  feedbacks: Array<{
    moduleId: string;
    feedback: string;
    timestamp: string;
  }>;
  completedModules: string[];
}

interface BackendPlanResponse {
  title: string;
  modules: Array<{
    id: string;
    title: string;
    description: string;
    objectives: string[];
    resources: string[];
    quiz: {
      question: string;
      options?: string[];
      type: "multiple" | "open";
    };
    type: "lesson" | "quiz" | "exam";
  }>;
}

// Simple fallback plan
function createSimplePlan() {
  return {
    title: "G√ºncellenmi≈ü √ñƒürenme Planƒ±",
    modules: [
      {
        id: "1",
        title: "Yeniden Ba≈ülangƒ±√ß",
        description: "Geri bildirimleriniz doƒürultusunda optimize edilmi≈ü i√ßerik",
        objectives: ["Geli≈ütirilmi≈ü √∂ƒürenme deneyimi", "Ki≈üiselle≈ütirilmi≈ü yakla≈üƒ±m"],
        resources: ["G√ºncellenmi≈ü materyaller", "ƒ∞yile≈ütirilmi≈ü alƒ±≈ütƒ±rmalar"],
        quiz: { question: "Bu yeni yakla≈üƒ±m nasƒ±l?", type: "open" },
        completed: false,
        unlocked: true,
        position: { x: 50, y: 90 },
        type: "lesson",
      },
      {
        id: "2",
        title: "Geli≈ümi≈ü Konular",
        description: "Daha derinlemesine ve pratik odaklƒ± i√ßerik",
        objectives: ["ƒ∞leri seviye beceriler", "Ger√ßek d√ºnya uygulamalarƒ±"],
        resources: ["Pratik projeler", "Ger√ßek √∂rnekler"],
        quiz: {
          question: "Hangi konu daha faydalƒ±?",
          options: ["Teori", "Pratik", "Projeler", "√ñrnekler"],
          type: "multiple",
        },
        completed: false,
        unlocked: false,
        position: { x: 50, y: 75 },
        type: "lesson",
      },
      {
        id: "3",
        title: "Final Deƒüerlendirme",
        description: "Kapsamlƒ± deƒüerlendirme ve gelecek planlarƒ±",
        objectives: ["Genel deƒüerlendirme", "ƒ∞lerleme √∂l√ß√ºm√º"],
        resources: [],
        quiz: {
          question: "Genel memnuniyetiniz nedir?",
          options: ["√áok memnun", "Memnun", "Orta", "Geli≈ütirilmeli"],
          type: "multiple",
        },
        completed: false,
        unlocked: false,
        position: { x: 50, y: 60 },
        type: "exam",
      },
    ],
  };
}

export async function POST(request: NextRequest) {
  try {
    const { userData, feedbacks, completedModules }: RegenerateRequest = await request.json();

    if (!userData || !userData.learningGoal) {
      return NextResponse.json({ error: "Missing user data" }, { status: 400 });
    }

    console.log("üîÑ Regenerating plan via backend API...");

    try {
      // Try backend API first
      const backendResponse = await apiClient.regeneratePlan({
        userData,
        feedbacks,
        completedModules,
      }) as BackendPlanResponse;

      console.log("‚úÖ Successfully regenerated plan from backend");

      // Enhance modules with frontend-specific fields
      const enhancedModules = backendResponse.modules.map((module, index) => ({
        id: module.id || `${index + 1}`,
        title: module.title || `G√ºncellenmi≈ü Mod√ºl ${index + 1}`,
        description: module.description || "Geri bildirimler doƒürultusunda g√ºncellenmi≈ü mod√ºl",
        objectives:
          Array.isArray(module.objectives) && module.objectives.length > 0
            ? module.objectives
            : ["Geli≈ütirilmi≈ü √∂ƒürenme hedefi"],
        resources:
          Array.isArray(module.resources) && module.resources.length > 0 
            ? module.resources 
            : ["G√ºncellenmi≈ü kaynaklar"],
        quiz: {
          question: module.quiz?.question || "Bu g√ºncellemeler nasƒ±l?",
          ...(module.quiz?.options && Array.isArray(module.quiz.options) 
            ? { options: module.quiz.options } 
            : {}),
          type: module.quiz?.type === "multiple" ? "multiple" : "open",
        },
        completed: false,
        unlocked: index === 0,
        position: { x: 50, y: 90 - index * 15 },
        type: module.type || (index === backendResponse.modules.length - 1 ? "exam" : "lesson"),
      }));

      const finalPlan = {
        title: backendResponse.title || "G√ºncellenmi≈ü √ñƒürenme Planƒ±",
        modules: enhancedModules,
      };

      return NextResponse.json(finalPlan);

    } catch (backendError) {
      console.error("‚ùå Backend API failed for regeneration:", backendError);
      console.log("üîÑ Falling back to simple plan...");

      // Fallback to simple plan
      const simplePlan = createSimplePlan();
      
      console.log("‚úÖ Generated simple fallback plan");
      
      return NextResponse.json(simplePlan);
    }

  } catch (error) {
    console.error("‚ùå Regenerate error:", error);
    return NextResponse.json({ error: "Plan g√ºncellenemedi" }, { status: 500 });
  }
}
