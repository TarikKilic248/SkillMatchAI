#!/usr/bin/env python3
"""
SkillMatch AI Backend Kurulum Script'i
"""

import os
import subprocess
import sys
import shutil

def run_command(command, check=True):
    """Komutu √ßalƒ±≈ütƒ±r ve sonucu d√∂nd√ºr"""
    try:
        result = subprocess.run(command, shell=True, check=check, capture_output=True, text=True)
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.CalledProcessError as e:
        return False, e.stdout, e.stderr

def check_python_version():
    """Python s√ºr√ºm√ºn√º kontrol et"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8 veya daha yeni bir s√ºr√ºm gerekli!")
        print(f"Mevcut s√ºr√ºm: {sys.version}")
        return False
    print(f"‚úÖ Python s√ºr√ºm√º: {sys.version.split()[0]}")
    return True

def create_virtual_environment():
    """Virtual environment olu≈ütur"""
    print("üîß Virtual environment olu≈üturuluyor...")
    success, stdout, stderr = run_command("python3 -m venv venv")
    if success:
        print("‚úÖ Virtual environment ba≈üarƒ±yla olu≈üturuldu")
        return True
    else:
        print(f"‚ùå Virtual environment olu≈üturulamadƒ±: {stderr}")
        return False

def activate_and_install():
    """Virtual environment'ƒ± aktifle≈ütir ve paketleri y√ºkle"""
    print("üì¶ Paketler y√ºkleniyor...")
    
    # Virtual environment yolunu belirle
    if os.name == 'nt':  # Windows
        activate_cmd = "venv\\Scripts\\activate.bat && "
        pip_cmd = "venv\\Scripts\\pip"
    else:  # Unix/Linux/MacOS
        activate_cmd = "source venv/bin/activate && "
        pip_cmd = "venv/bin/pip"
    
    # Pip'i g√ºncelle
    success, stdout, stderr = run_command(f"{pip_cmd} install --upgrade pip")
    if not success:
        print(f"‚ö†Ô∏è Pip g√ºncelleme hatasƒ±: {stderr}")
    
    # Requirements'larƒ± y√ºkle
    success, stdout, stderr = run_command(f"{pip_cmd} install -r requirements.txt")
    if success:
        print("‚úÖ Paketler ba≈üarƒ±yla y√ºklendi")
        return True
    else:
        print(f"‚ùå Paket y√ºkleme hatasƒ±: {stderr}")
        return False

def setup_environment():
    """Environment dosyasƒ±nƒ± olu≈ütur"""
    env_file = ".env"
    env_example = "env_example.txt"
    
    if not os.path.exists(env_file):
        if os.path.exists(env_example):
            shutil.copy(env_example, env_file)
            print(f"‚úÖ {env_file} dosyasƒ± olu≈üturuldu")
            print(f"üîß {env_file} dosyasƒ±nƒ± d√ºzenleyerek API anahtarlarƒ±nƒ±zƒ± ekleyin")
            return True
        else:
            print(f"‚ùå {env_example} dosyasƒ± bulunamadƒ±")
            return False
    else:
        print(f"‚úÖ {env_file} dosyasƒ± zaten mevcut")
        return True

def create_database():
    """Veritabanƒ±nƒ± olu≈ütur"""
    print("üóÑÔ∏è Veritabanƒ± olu≈üturuluyor...")
    
    if os.name == 'nt':  # Windows
        python_cmd = "venv\\Scripts\\python"
    else:  # Unix/Linux/MacOS
        python_cmd = "venv/bin/python3"
    
    # Database olu≈üturma script'i
    create_db_script = """
from models import Base
from database import engine
import logging

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

try:
    Base.metadata.create_all(bind=engine)
    logger.info("‚úÖ Veritabanƒ± tablolarƒ± ba≈üarƒ±yla olu≈üturuldu")
except Exception as e:
    logger.error(f"‚ùå Veritabanƒ± olu≈üturma hatasƒ±: {e}")
"""
    
    with open("create_db.py", "w", encoding="utf-8") as f:
        f.write(create_db_script)
    
    success, stdout, stderr = run_command(f"{python_cmd} create_db.py")
    
    # Ge√ßici dosyayƒ± sil
    if os.path.exists("create_db.py"):
        os.remove("create_db.py")
    
    if success:
        print("‚úÖ Veritabanƒ± ba≈üarƒ±yla olu≈üturuldu")
        return True
    else:
        print(f"‚ùå Veritabanƒ± olu≈üturma hatasƒ±: {stderr}")
        return False

def main():
    """Ana kurulum fonksiyonu"""
    print("üöÄ SkillMatch AI Backend Kurulumu Ba≈ülƒ±yor...")
    print("=" * 50)
    
    # Python s√ºr√ºm kontrol√º
    if not check_python_version():
        return False
    
    # Virtual environment olu≈ütur
    if not os.path.exists("venv"):
        if not create_virtual_environment():
            return False
    else:
        print("‚úÖ Virtual environment zaten mevcut")
    
    # Paketleri y√ºkle
    if not activate_and_install():
        return False
    
    # Environment dosyasƒ±nƒ± olu≈ütur
    if not setup_environment():
        return False
    
    # Veritabanƒ±nƒ± olu≈ütur
    if not create_database():
        return False
    
    print("\n" + "=" * 50)
    print("üéâ Kurulum ba≈üarƒ±yla tamamlandƒ±!")
    print("\nüìã Sonraki Adƒ±mlar:")
    print("1. .env dosyasƒ±nƒ± d√ºzenleyerek Gemini API anahtarƒ±nƒ±zƒ± ekleyin")
    print("2. Uygulamayƒ± ba≈ülatmak i√ßin: python start.py")
    print("3. API dok√ºmantasyonu: http://localhost:8000/docs")
    print("\nüí° ƒ∞pucu: 'python start.py --help' ile t√ºm se√ßenekleri g√∂rebilirsiniz")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 